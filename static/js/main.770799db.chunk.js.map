{"version":3,"sources":["js/FieldsCompleted.js","js/App.js","reportWebVitals.js","index.js"],"names":["FieldsCompleted","props","useState","numberArr","setNumberArr","inscribedMin","setInscribedMin","inscribedMax","setInscribedMax","inscribedQuantity","setInscribedQuantity","className","map","data","type","onChange","e","target","value","onClick","min","Number","max","quantity","preventDefault","i","Math","floor","random","btnFunction","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA4EeA,MA1Ef,SAAyBC,GACvB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,qBAAxC,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAwCJ,qBAAxC,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAkDN,qBAAlD,mBAAOO,EAAP,KAA0BC,EAA1B,KAmBA,OACE,0BAASC,UAAU,cAAnB,UACE,qBAAKA,UAAU,kBAAf,SACGR,EAAUS,KAAI,SAACC,GAAD,OACb,4BAAIA,SAGR,uBAAMF,UAAU,UAAhB,UACE,gCACE,kCACE,oDACA,uBACEG,KAAK,SACLC,SAAU,SAACC,GACTV,EAAgBU,EAAEC,OAAOC,aAI/B,kCACE,wDACA,uBACEJ,KAAK,SACLC,SAAU,SAACC,GACTR,EAAgBQ,EAAEC,OAAOC,aAI/B,kCACE,uDACA,uBACEP,UAAU,eACVG,KAAK,SACLC,SAAU,SAACC,GACTN,EAAqBM,EAAEC,OAAOC,gBAKtC,wBACEJ,KAAK,SACLK,QAAS,SAACH,GAAD,OAzDjB,SAAqBA,EAAGX,EAAcE,EAAcE,GAClD,IAAMW,EAAMC,OAAOhB,GACbiB,EAAMD,OAAOd,GACbgB,EAAWF,OAAOZ,GAExBO,EAAEQ,iBAEFpB,EAAa,IAEb,IAAK,IAAIqB,EAAI,EAAGA,EAAIF,EAAUE,IAC5BrB,GAAa,SAACD,GAAD,4BACRA,GADQ,CAEXuB,KAAKC,MAAMD,KAAKE,UAAYN,EAAMF,EAAM,IAAMA,OA8C1CS,CAAYb,EAAGX,EAAcE,EAAcE,IAH/C,mCClDOqB,MARf,WACE,OACE,qBAAKnB,UAAU,MAAf,SACE,cAAC,EAAD,OCISoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.770799db.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction FieldsCompleted(props) {\r\n  const [numberArr, setNumberArr] = useState([]);\r\n  const [inscribedMin, setInscribedMin] = useState();\r\n  const [inscribedMax, setInscribedMax] = useState();\r\n  const [inscribedQuantity, setInscribedQuantity] = useState();\r\n\r\n  function btnFunction(e, inscribedMin, inscribedMax, inscribedQuantity) {\r\n    const min = Number(inscribedMin);\r\n    const max = Number(inscribedMax);\r\n    const quantity = Number(inscribedQuantity);\r\n\r\n    e.preventDefault();\r\n\r\n    setNumberArr([]);\r\n\r\n    for (let i = 0; i < quantity; i++) {\r\n      setNumberArr((numberArr) => [\r\n        ...numberArr,\r\n        Math.floor(Math.random() * (max - min + 1)) + min,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"app_wrapper\">\r\n      <div className=\"results_numbers\">\r\n        {numberArr.map((data) => (\r\n          <p>{data}</p>\r\n        ))}\r\n      </div>\r\n      <form className=\"form_fc\">\r\n        <div>\r\n          <label>\r\n            <p>Najmniejsza liczba:</p>\r\n            <input\r\n              type=\"Number\"\r\n              onChange={(e) => {\r\n                setInscribedMin(e.target.value);\r\n              }}\r\n            />\r\n          </label>\r\n          <label>\r\n            <p>Największa liczba:</p>\r\n            <input\r\n              type=\"number\"\r\n              onChange={(e) => {\r\n                setInscribedMax(e.target.value);\r\n              }}\r\n            />\r\n          </label>\r\n          <label>\r\n            <p>Ilość liczb:</p>\r\n            <input\r\n              className=\"input_number\"\r\n              type=\"number\"\r\n              onChange={(e) => {\r\n                setInscribedQuantity(e.target.value);\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={(e) =>\r\n            btnFunction(e, inscribedMin, inscribedMax, inscribedQuantity)\r\n          }\r\n        >\r\n          Zatwierdź\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default FieldsCompleted;\r\n","import \"../css/App.css\";\nimport \"../css/FieldsCompleted.css\";\n\nimport FielsdCompleted from \"./FieldsCompleted\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FielsdCompleted />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./js/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}